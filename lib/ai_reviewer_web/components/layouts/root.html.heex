<!DOCTYPE html>
<html lang="en" class="[scrollbar-gutter:stable]">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="csrf-token" content={get_csrf_token()} />
    <.live_title default="AiReviewer" suffix=" Â· Phoenix Framework">
      {assigns[:page_title]}
    </.live_title>
    <link phx-track-static rel="stylesheet" href={~p"/assets/app.css"} />
    <script defer phx-track-static type="text/javascript" src={~p"/assets/app.js"}>
    </script>
    <style>
      /* Markdown styling */
      .markdown-content h1, .markdown-content h2, .markdown-content h3, 
      .markdown-content h4, .markdown-content h5, .markdown-content h6 {
        font-weight: 600;
        margin-top: 1.5em;
        margin-bottom: 0.5em;
      }
      
      .markdown-content h1 { font-size: 1.5rem; }
      .markdown-content h2 { font-size: 1.25rem; }
      .markdown-content h3 { font-size: 1.125rem; }
      
      .markdown-content p {
        margin-bottom: 1em;
      }
      
      .markdown-content ul, .markdown-content ol {
        margin-left: 1.5em;
        margin-bottom: 1em;
      }
      
      .markdown-content ul { list-style-type: disc; }
      .markdown-content ol { list-style-type: decimal; }
      
      .markdown-content pre {
        background-color: #f3f4f6;
        padding: 0.75em;
        border-radius: 0.375rem;
        overflow-x: auto;
        margin-bottom: 1em;
      }
      
      .markdown-content code {
        background-color: #f3f4f6;
        padding: 0.125em 0.25em;
        border-radius: 0.25rem;
        font-family: ui-monospace, monospace;
        font-size: 0.875em;
      }
      
      .markdown-content a {
        color: #3b82f6;
        text-decoration: underline;
      }
      
      .markdown-content blockquote {
        border-left: 4px solid #e5e7eb;
        padding-left: 1em;
        color: #6b7280;
        margin-bottom: 1em;
      }
      
      .markdown-content img {
        max-width: 100%;
        height: auto;
      }
      
      .markdown-content table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 1em;
      }
      
      .markdown-content th, .markdown-content td {
        border: 1px solid #e5e7eb;
        padding: 0.5em;
      }
      
      .markdown-content th {
        background-color: #f3f4f6;
      }
    </style>
    <script>
      // Global simple click handler to force close dropdowns
      document.addEventListener("click", function() {
        setTimeout(function() {
          document.querySelectorAll("[id$='-dropdown']").forEach(function(dropdown) {
            dropdown.style.display = "none";
          });
        }, 50);
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        // Track all open dropdowns
        const openDropdowns = new Set();
        
        // Function to close a specific dropdown
        function closeDropdown(dropdownId) {
          const dropdown = document.getElementById(dropdownId);
          if (dropdown) {
            dropdown.style.display = "none";
            openDropdowns.delete(dropdownId);
          }
        }
        
        // Function to close all dropdowns
        function closeAllDropdowns() {
          // First close all tracked dropdowns
          openDropdowns.forEach(id => {
            const dropdown = document.getElementById(id);
            if (dropdown) dropdown.style.display = "none";
          });
          openDropdowns.clear();
          
          // Also forcibly close any dropdown with -dropdown in the id
          document.querySelectorAll("[id$='-dropdown']").forEach(dropdown => {
            dropdown.style.display = "none";
          });
        }
        
        // Directly attach click handlers to all selection buttons
        function attachSelectionHandlers() {
          // Status dropdowns
          document.querySelectorAll("[phx-click='select_pr_status']").forEach(button => {
            if (!button._hasClickHandler) {
              button._hasClickHandler = true;
              button.addEventListener("click", () => {
                setTimeout(() => {
                  closeAllDropdowns();
                }, 10);
              });
            }
          });
          
          // PR selection buttons
          document.querySelectorAll("[phx-click='select_pr']").forEach(button => {
            if (!button._hasClickHandler) {
              button._hasClickHandler = true;
              button.addEventListener("click", () => {
                setTimeout(() => {
                  closeAllDropdowns();
                }, 10);
              });
            }
          });
        }
        
        // Run this whenever the DOM updates
        function initializeDropdowns() {
          attachSelectionHandlers();
          
          // Also ensure all dropdowns are initially closed
          document.querySelectorAll("[id$='-dropdown']").forEach(dropdown => {
            dropdown.style.display = "none";
          });
        }
        
        // Close dropdowns when clicking outside
        document.addEventListener("click", (event) => {
          // Skip if clicked on toggle button
          if (event.target.closest("[phx-click*='toggle']")) return;
          
          // Skip if clicked inside dropdown
          if (event.target.closest("[id$='-dropdown']")) return;
          
          // Close all dropdowns
          closeAllDropdowns();
        });
        
        // Handle dropdown toggle buttons
        document.addEventListener("click", (event) => {
          const toggleBtn = event.target.closest("[phx-click*='toggle']");
          if (!toggleBtn) return;
          
          // Extract the dropdown ID from the toggle attribute
          const toggleAttr = toggleBtn.getAttribute("phx-click");
          const match = toggleAttr.match(/to: "#([^"]+)"/);
          
          if (match && match[1]) {
            const dropdownId = match[1];
            const dropdown = document.getElementById(dropdownId);
            
            if (dropdown) {
              // First close all other dropdowns
              closeAllDropdowns();
              
              // Then toggle this dropdown
              if (dropdown.style.display === "none") {
                dropdown.style.display = "block";
                openDropdowns.add(dropdownId);
              } else {
                dropdown.style.display = "none";
                openDropdowns.delete(dropdownId);
              }
              
              // Prevent propagation
              event.stopPropagation();
            }
          }
        });
        
        // Run initialization
        initializeDropdowns();
        
        // Also run on Phoenix DOM updates
        document.addEventListener("phx:update", () => {
          initializeDropdowns();
          
          // Handle comment section chevrons
          document.querySelectorAll("[id^='comment-body-']").forEach((el) => {
            const index = el.id.split("-").pop();
            const chevron = document.getElementById(`chevron-${index}`);
            
            if (chevron) {
              // Check initial state
              if (el.style.display !== "none") {
                chevron.classList.add("rotate-180");
              } else {
                chevron.classList.remove("rotate-180");
              }
              
              // Watch for changes to the element's display property
              const observer = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                  if (mutation.attributeName === "style") {
                    // Toggle rotation based on visibility
                    if (el.style.display === "none") {
                      chevron.classList.remove("rotate-180");
                    } else {
                      chevron.classList.add("rotate-180");
                    }
                  }
                });
              });
              
              observer.observe(el, { attributes: true });
            }
          });
        });
      });
    </script>
  </head>
  <body class="bg-white">
    {@inner_content}
  </body>
</html>
